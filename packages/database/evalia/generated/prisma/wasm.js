
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  displayName: 'displayName',
  status: 'status',
  avatarUrl: 'avatarUrl',
  locale: 'locale',
  timezone: 'timezone',
  metadata: 'metadata',
  deletedAt: 'deletedAt',
  phoneNumber: 'phoneNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  logoUrl: 'logoUrl',
  metadata: 'metadata',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrgMembershipScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  userId: 'userId',
  joinedAt: 'joinedAt',
  isPrimary: 'isPrimary'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  resource: 'resource',
  action: 'action',
  description: 'description'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  name: 'name',
  description: 'description',
  system: 'system',
  createdById: 'createdById',
  metadata: 'metadata',
  deletedAt: 'deletedAt'
};

exports.Prisma.RolePermissionScalarFieldEnum = {
  id: 'id',
  roleId: 'roleId',
  permissionId: 'permissionId'
};

exports.Prisma.RoleAssignmentScalarFieldEnum = {
  id: 'id',
  membershipId: 'membershipId',
  roleId: 'roleId',
  assignedAt: 'assignedAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  name: 'name',
  slug: 'slug',
  description: 'description',
  parentId: 'parentId',
  deletedAt: 'deletedAt'
};

exports.Prisma.TeamMemberScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  userId: 'userId',
  addedAt: 'addedAt'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  name: 'name',
  slug: 'slug',
  description: 'description',
  deletedAt: 'deletedAt'
};

exports.Prisma.EmployeeProfileScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  userId: 'userId',
  departmentId: 'departmentId',
  managerId: 'managerId',
  jobTitle: 'jobTitle',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  metadata: 'metadata'
};

exports.Prisma.DashboardMenuItemScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  parentId: 'parentId',
  label: 'label',
  key: 'key',
  icon: 'icon',
  url: 'url',
  order: 'order',
  hidden: 'hidden',
  metadata: 'metadata',
  deletedAt: 'deletedAt'
};

exports.Prisma.DashboardMenuItemRoleScalarFieldEnum = {
  id: 'id',
  menuItemId: 'menuItemId',
  roleId: 'roleId'
};

exports.Prisma.InvitationScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  email: 'email',
  phoneNumber: 'phoneNumber',
  roleId: 'roleId',
  token: 'token',
  status: 'status',
  invitedById: 'invitedById',
  expiresAt: 'expiresAt',
  acceptedAt: 'acceptedAt',
  metadata: 'metadata'
};

exports.Prisma.ApprovalRequestScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  type: 'type',
  status: 'status',
  requesterId: 'requesterId',
  decidedById: 'decidedById',
  decidedAt: 'decidedAt',
  payload: 'payload',
  reason: 'reason',
  decisionNote: 'decisionNote'
};

exports.Prisma.FeedbackScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  authorId: 'authorId',
  targetUserId: 'targetUserId',
  type: 'type',
  rating: 'rating',
  content: 'content',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  orgId: 'orgId',
  channel: 'channel',
  type: 'type',
  title: 'title',
  body: 'body',
  data: 'data',
  phoneNumber: 'phoneNumber',
  readAt: 'readAt',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  actorId: 'actorId',
  action: 'action',
  resourceType: 'resourceType',
  resourceId: 'resourceId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  senderPhoneNumber: 'senderPhoneNumber',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.OrgSettingScalarFieldEnum = {
  id: 'id',
  orgId: 'orgId',
  key: 'key',
  value: 'value',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED'
};

exports.ResourceType = exports.$Enums.ResourceType = {
  USER: 'USER',
  ORGANIZATION: 'ORGANIZATION',
  TEAM: 'TEAM',
  ROLE: 'ROLE',
  PERMISSION: 'PERMISSION',
  DEPARTMENT: 'DEPARTMENT',
  EMPLOYEE_PROFILE: 'EMPLOYEE_PROFILE',
  DASHBOARD_MENU_ITEM: 'DASHBOARD_MENU_ITEM',
  INVITATION: 'INVITATION',
  APPROVAL_REQUEST: 'APPROVAL_REQUEST',
  FEEDBACK: 'FEEDBACK',
  ORG_SETTING: 'ORG_SETTING'
};

exports.ActionType = exports.$Enums.ActionType = {
  READ: 'READ',
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  MANAGE: 'MANAGE',
  ASSIGN: 'ASSIGN'
};

exports.EmployeeStatus = exports.$Enums.EmployeeStatus = {
  ACTIVE: 'ACTIVE',
  ONBOARDING: 'ONBOARDING',
  SUSPENDED: 'SUSPENDED',
  TERMINATED: 'TERMINATED'
};

exports.InvitationStatus = exports.$Enums.InvitationStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  EXPIRED: 'EXPIRED',
  REVOKED: 'REVOKED'
};

exports.ApprovalType = exports.$Enums.ApprovalType = {
  GENERIC: 'GENERIC',
  EMPLOYEE_ONBOARDING: 'EMPLOYEE_ONBOARDING',
  ROLE_CHANGE: 'ROLE_CHANGE'
};

exports.ApprovalStatus = exports.$Enums.ApprovalStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  CANCELED: 'CANCELED'
};

exports.FeedbackType = exports.$Enums.FeedbackType = {
  GENERAL: 'GENERAL',
  PERFORMANCE: 'PERFORMANCE',
  PEER: 'PEER',
  MANAGER: 'MANAGER',
  SELF: 'SELF'
};

exports.NotificationChannel = exports.$Enums.NotificationChannel = {
  IN_APP: 'IN_APP',
  EMAIL: 'EMAIL',
  SMS: 'SMS'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  GENERIC: 'GENERIC',
  SYSTEM: 'SYSTEM',
  INVITATION: 'INVITATION',
  APPROVAL: 'APPROVAL',
  FEEDBACK: 'FEEDBACK',
  ALERT: 'ALERT',
  REMINDER: 'REMINDER',
  CUSTOM: 'CUSTOM'
};

exports.Prisma.ModelName = {
  User: 'User',
  Organization: 'Organization',
  OrgMembership: 'OrgMembership',
  Permission: 'Permission',
  Role: 'Role',
  RolePermission: 'RolePermission',
  RoleAssignment: 'RoleAssignment',
  Team: 'Team',
  TeamMember: 'TeamMember',
  Department: 'Department',
  EmployeeProfile: 'EmployeeProfile',
  DashboardMenuItem: 'DashboardMenuItem',
  DashboardMenuItemRole: 'DashboardMenuItemRole',
  Invitation: 'Invitation',
  ApprovalRequest: 'ApprovalRequest',
  Feedback: 'Feedback',
  Notification: 'Notification',
  AuditLog: 'AuditLog',
  OrgSetting: 'OrgSetting'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
