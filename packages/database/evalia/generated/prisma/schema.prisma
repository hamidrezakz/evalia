// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------------------
// Enums
// ------------------------------

/// Roles & permissions operate on these resource domains
enum ResourceType {
  USER
  ORGANIZATION
  TEAM
  ROLE
  PERMISSION
  DEPARTMENT
  EMPLOYEE_PROFILE
  DASHBOARD_MENU_ITEM
  INVITATION
  APPROVAL_REQUEST
  FEEDBACK
  ORG_SETTING
}

/// Generic CRUD + management spectrum
enum ActionType {
  READ
  CREATE
  UPDATE
  DELETE
  MANAGE // elevated holistic management
  ASSIGN // assigning relationships (roles, teams, etc.)
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum EmployeeStatus {
  ACTIVE
  ONBOARDING
  SUSPENDED
  TERMINATED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELED
}

enum ApprovalType {
  GENERIC
  EMPLOYEE_ONBOARDING
  ROLE_CHANGE
}

enum FeedbackType {
  GENERAL
  PERFORMANCE
  PEER
  MANAGER
  SELF
}

enum NotificationChannel {
  IN_APP
  EMAIL
  SMS
}

/// نوع نوتیفیکیشن (برای دسته‌بندی و فیلتر بهتر)
enum NotificationType {
  GENERIC
  SYSTEM
  INVITATION
  APPROVAL
  FEEDBACK
  ALERT
  REMINDER
  CUSTOM
}

// ------------------------------
// Core Identity & Tenancy
// ------------------------------

/// Global user (can belong to multiple organizations)
model User {
  id           String     @id @default(cuid())
  email        String     @unique
  passwordHash String // If using password auth; for SSO you can add nullable provider fields later
  displayName  String?
  status       UserStatus @default(ACTIVE)
  avatarUrl    String?
  locale       String? // i18n preference
  timezone     String? // For scheduling & reports
  metadata     Json? // Extensible user metadata
  deletedAt    DateTime? // Soft delete (avoid cascading actual data loss)

  /// شماره تلفن کاربر (یونیک، اختیاری)
  phoneNumber String? @unique

  // Relations
  memberships       OrgMembership[]
  roles             Role[]            @relation("RoleCreatedBy")
  employeeProfiles  EmployeeProfile[]
  approvalRequests  ApprovalRequest[] @relation("ApprovalRequester")
  approvalDecisions ApprovalRequest[] @relation("ApprovalDecider")
  feedbackAuthored  Feedback[]        @relation("FeedbackAuthor")
  feedbackReceived  Feedback[]        @relation("FeedbackTargetUser")
  notifications     Notification[]
  auditLogs         AuditLog[]        @relation("AuditActor")
  teamMemberships   TeamMember[]
  invitationsSent   Invitation[]      @relation("UserInvited")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Tenant root entity
model Organization {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique // human friendly identifier
  description String?
  logoUrl     String?
  metadata    Json? // arbitrary structured settings (lightweight)
  deletedAt   DateTime?

  // Relations
  memberships        OrgMembership[]
  roles              Role[]
  teams              Team[]
  departments        Department[]
  employeeProfiles   EmployeeProfile[]
  dashboardMenuItems DashboardMenuItem[]
  invitations        Invitation[]
  approvalRequests   ApprovalRequest[]
  feedback           Feedback[]
  notifications      Notification[]
  auditLogs          AuditLog[]
  settings           OrgSetting[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// Membership ties user to an organization (lightweight) - roles applied via RoleAssignment
model OrgMembership {
  id        String   @id @default(cuid())
  orgId     String
  userId    String
  joinedAt  DateTime @default(now())
  isPrimary Boolean  @default(false) // user can mark a primary org for UI default

  organization    Organization     @relation(fields: [orgId], references: [id])
  user            User             @relation(fields: [userId], references: [id])
  roleAssignments RoleAssignment[]

  @@unique([orgId, userId])
  @@index([userId])
}

// ------------------------------
// Authorization
// ------------------------------

/// Canonical permission atom (resource + action). Keep global for now.
model Permission {
  id          String       @id @default(cuid())
  resource    ResourceType
  action      ActionType
  description String?

  rolePermissions RolePermission[]

  @@unique([resource, action])
}

/// Named role within an organization.
model Role {
  id          String    @id @default(cuid())
  orgId       String
  name        String
  description String?
  system      Boolean   @default(false) // protects core roles from edits
  createdById String? // auditing creator
  metadata    Json?
  deletedAt   DateTime?

  organization    Organization            @relation(fields: [orgId], references: [id])
  createdBy       User?                   @relation("RoleCreatedBy", fields: [createdById], references: [id])
  rolePermissions RolePermission[]
  assignments     RoleAssignment[]
  menuItemLinks   DashboardMenuItemRole[]
  invitations     Invitation[]

  @@unique([orgId, name])
  @@index([orgId])
}

/// Join table Role <-> Permission
model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
  @@index([permissionId])
}

/// Assignment of a role to a membership (user inside org)
model RoleAssignment {
  id           String    @id @default(cuid())
  membershipId String
  roleId       String
  assignedAt   DateTime  @default(now())
  expiresAt    DateTime?

  membership OrgMembership @relation(fields: [membershipId], references: [id])
  role       Role          @relation(fields: [roleId], references: [id])

  @@unique([membershipId, roleId])
  @@index([roleId])
}

// ------------------------------
// Organizational Structure
// ------------------------------

model Team {
  id          String    @id @default(cuid())
  orgId       String
  name        String
  slug        String
  description String?
  parentId    String? // nested teams
  deletedAt   DateTime?

  organization Organization @relation(fields: [orgId], references: [id])
  parent       Team?        @relation("TeamHierarchy", fields: [parentId], references: [id])
  children     Team[]       @relation("TeamHierarchy")
  members      TeamMember[]

  @@unique([orgId, slug])
  @@index([orgId])
}

model TeamMember {
  id      String   @id @default(cuid())
  teamId  String
  userId  String
  addedAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
  @@index([userId])
}

model Department {
  id          String    @id @default(cuid())
  orgId       String
  name        String
  slug        String
  description String?
  deletedAt   DateTime?

  organization     Organization      @relation(fields: [orgId], references: [id])
  employeeProfiles EmployeeProfile[]

  @@unique([orgId, slug])
  @@index([orgId])
}

/// Profile-level data for user inside an organization
model EmployeeProfile {
  id           String         @id @default(cuid())
  orgId        String
  userId       String
  departmentId String?
  managerId    String? // self-reference (another EmployeeProfile)
  jobTitle     String?
  status       EmployeeStatus @default(ONBOARDING)
  startDate    DateTime?
  endDate      DateTime?
  metadata     Json? // custom HR fields

  organization Organization      @relation(fields: [orgId], references: [id])
  user         User              @relation(fields: [userId], references: [id])
  department   Department?       @relation(fields: [departmentId], references: [id])
  manager      EmployeeProfile?  @relation("EmployeeManager", fields: [managerId], references: [id])
  reports      EmployeeProfile[] @relation("EmployeeManager")

  @@unique([orgId, userId])
  @@index([departmentId])
  @@index([managerId])
}

// ------------------------------
// UI: Dashboard Menu Configuration
// ------------------------------

model DashboardMenuItem {
  id        String    @id @default(cuid())
  orgId     String // menu config is per org
  parentId  String?
  label     String
  key       String // stable identifier used in frontend routing / feature flags
  icon      String? // lucide icon name or custom
  url       String? // direct path
  order     Int       @default(0)
  hidden    Boolean   @default(false)
  metadata  Json? // JSON for conditions (e.g., feature flags, dynamic rules)
  deletedAt DateTime?

  organization Organization            @relation(fields: [orgId], references: [id])
  parent       DashboardMenuItem?      @relation("DashboardMenuHierarchy", fields: [parentId], references: [id])
  children     DashboardMenuItem[]     @relation("DashboardMenuHierarchy")
  roleLinks    DashboardMenuItemRole[]

  @@unique([orgId, key])
  @@index([orgId])
}

/// Many-to-many: which roles can view this menu item
model DashboardMenuItemRole {
  id         String @id @default(cuid())
  menuItemId String
  roleId     String

  menuItem DashboardMenuItem @relation(fields: [menuItemId], references: [id])
  role     Role              @relation(fields: [roleId], references: [id])

  @@unique([menuItemId, roleId])
  @@index([roleId])
}

// ------------------------------
// Invitations & Approvals
// ------------------------------

model Invitation {
  id          String           @id @default(cuid())
  orgId       String
  email       String? // ایمیل دعوت‌شونده (اختیاری، برای دعوت با ایمیل)
  phoneNumber String? // شماره تلفن دعوت‌شونده (اختیاری، برای دعوت با پیامک)
  roleId      String? // optional pre-assigned role suggestion
  token       String           @unique
  status      InvitationStatus @default(PENDING)
  invitedById String?
  expiresAt   DateTime?
  acceptedAt  DateTime?
  metadata    Json?

  organization Organization @relation(fields: [orgId], references: [id])
  role         Role?        @relation(fields: [roleId], references: [id])
  invitedBy    User?        @relation("UserInvited", fields: [invitedById], references: [id])

  /// فقط یکی از ایمیل یا شماره تلفن باید مقدار داشته باشد (در سطح اپلیکیشن اعتبارسنجی شود)
  @@unique([orgId, email])
  @@unique([orgId, phoneNumber])
  @@index([orgId])
}

model ApprovalRequest {
  id           String         @id @default(cuid())
  orgId        String
  type         ApprovalType   @default(GENERIC)
  status       ApprovalStatus @default(PENDING)
  requesterId  String
  decidedById  String?
  decidedAt    DateTime?
  payload      Json? // details of what is being approved
  reason       String?
  decisionNote String?

  organization Organization @relation(fields: [orgId], references: [id])
  requester    User         @relation("ApprovalRequester", fields: [requesterId], references: [id])
  decider      User?        @relation("ApprovalDecider", fields: [decidedById], references: [id])

  @@index([orgId])
  @@index([status])
}

// ------------------------------
// Feedback & Communication
// ------------------------------

model Feedback {
  id           String       @id @default(cuid())
  orgId        String
  authorId     String
  targetUserId String? // recipient (optional for org-wide feedback)
  type         FeedbackType @default(GENERAL)
  rating       Int? // optional numeric rating
  content      String
  metadata     Json?
  createdAt    DateTime     @default(now())

  organization Organization @relation(fields: [orgId], references: [id])
  author       User         @relation("FeedbackAuthor", fields: [authorId], references: [id])
  targetUser   User?        @relation("FeedbackTargetUser", fields: [targetUserId], references: [id])

  @@index([orgId])
  @@index([targetUserId])
}

// ------------------------------
// Notifications & Audit
// ------------------------------

model Notification {
  id          String              @id @default(cuid())
  userId      String
  orgId       String?
  channel     NotificationChannel @default(IN_APP)
  type        NotificationType    @default(GENERIC)
  title       String?
  body        String?
  data        Json? // payload for client
  phoneNumber String? // شماره مقصد برای SMS (اختیاری)
  readAt      DateTime?
  createdAt   DateTime            @default(now())

  user         User          @relation(fields: [userId], references: [id])
  organization Organization? @relation(fields: [orgId], references: [id])

  @@index([userId, readAt])
  @@index([phoneNumber])
}

model AuditLog {
  id                String       @id @default(cuid())
  orgId             String?
  actorId           String?
  action            String // e.g. USER.CREATED
  resourceType      ResourceType
  resourceId        String?
  ipAddress         String?
  userAgent         String?
  senderPhoneNumber String? // شماره ارسال‌کننده (مثلاً برای لاگ پیامک)
  metadata          Json?
  createdAt         DateTime     @default(now())

  organization Organization? @relation(fields: [orgId], references: [id])
  actor        User?         @relation("AuditActor", fields: [actorId], references: [id])

  @@index([orgId])
  @@index([actorId])
  @@index([resourceType])
  @@index([senderPhoneNumber])
}

// ------------------------------
// Settings & Configuration
// ------------------------------

model OrgSetting {
  id        String   @id @default(cuid())
  orgId     String
  key       String
  value     Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization @relation(fields: [orgId], references: [id])

  @@unique([orgId, key])
  @@index([orgId])
}

// ------------------------------
// Future Extension Placeholders (not yet implemented):
// - Task, TaskItem, Message/Letter, HRTest, Integration, AIAssistantSession
// Keep IDs as cuid for consistency; add dedicated modules as features mature.
// ------------------------------
